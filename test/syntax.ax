const i32 uwu = 1;
const **i32 owo = 1;

const i32 TEST = 3 * 2 == 6 ? 69 : 420;


function subFunction(test2: i32) -> u0 {
    native [asm, arm] {
        "mov rsi, $" <- test2, 1
        "owo"
    }

    native [isa] {
        "mov 1"
    }
}

function main(argc: i32, args: *str[]) -> i32 {
    i32 test = 4 / 2 * 4;
    test = 32;

    i32[] array = {2, 3, 4, 5};

    i64 castTest = cast[i64] test;
    i32 allocTest = stackAlloc[i32];

    i128 bigggg = 1283471751274912571295721312412412421;

    subFunction(test);

    owo();
    owo(7);

    return 1;
}

function owo(test: i32 = 1) -> i32 {
    str string = "Test";

    if (10 - test == 4) {

    } else if (test == 1) {

    } else {

    }

    while (true) {
    }

    do {

    } while (true);

    switch (5 + 19) {
        case 4 -> {}
        case 24, 4 -> {
        }
        case 50: {
        }
        default -> {
        }
    }

    for (i32 i = 15; i >= 0; i = i - 1) {
         continue;
    }

    for (element: u8 -> string) {
    }

    i32 matched = match(test) {
        case 2 -> 1;
        case 5 -> 4;
        default -> 1;
    };

    loop {
        break;
    }

    if (false) {
        unreachable;
    }

}