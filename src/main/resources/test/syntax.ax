linked std.math;
linked owo.taw.wtw_ta.as1;

const i32 uwu = 1;
const **i32 owo = 1;

const i32 TEST = 3 * 2 == 6 ? 69 : 420;

structure Test {
    owo: i32,
    uwu: i32,
    test: str = "test"
}
structure Test2 {
    test: 21,
    ori: Test
}

// parent class
protected class UWU {}

// implementation class for UWU
public class OWO parent UWU {

    private i32 owo = 0;

    public construct(test: i32) {
        owo = test;
    }

    function test() -> i32 {
        return 69;
    }

}

function main(argc: i32, args: *str[]) -> i32 {
    i32 test = 4 / 2 * 4;
    test = 32;

    i32[] uwu = {2, 3, 4, 5};

    subFunction(test);

    owo();
    owo(7);

    return 1;
}

function owo(test: i32 = 1) -> i32 {
    str string = "Test";

    if (10 - test == 4) {

    } else if (test == 1) {

    } else {

    }

    while (true) {
    }

    do {

    } while (true);

    switch (5 + 19) {
        case 4 -> debug("Hello World");
        case 24, 4 -> {
            debug("TEST");
        }
        case 50: {
            debug("test with colon");
        }
        default -> {
            debug("default call");
        }
    }

    for (i32 i = 15; i >= 0; i = i - 1) {
         continue;
    }

    for (element: u8 -> string) {
    }

    i32 owo = match(test) {
        case 2 -> 1;
        case 5 -> 4;
        default -> 1;
    };

    loop {
        break;
    }

    if (false) {
        unreachable;
    }

}

function classTest() {
    UWU: owoClass = (4);
    i32 awa = owoClass.test();
}


function structTest() {
    Test: test = (1, 2, "TEST");
    test.owo = 5;
    test.uwu = 21;
    test.qwq = "OWO";

    Test2: test = ();

    test.owo.uwu = 1;

    i32 mow = test.owo;
}

function stringTest(owo: i32) {
    i32 owo;
}

function subFunction(test: i32) -> u0 {
    native [asm] {
        "mov rsi, $" <- test, 1
        "owo"
    }

    native [isa] {
        "mov 1"
    }

}